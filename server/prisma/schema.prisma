// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Skill {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())

  isLearning Boolean   @default(false)
  ownerId    Int
  owner      User      @relation("OwnedSkills", fields: [ownerId], references: [id], onDelete: Cascade)

  matches    Match[]
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())

  skills    Skill[]   @relation("OwnedSkills")
  sentMatches     Match[] @relation("SenderMatches")   // Matches enviados
  receivedMatches Match[] @relation("ReceiverMatches") // Matches recebidos
}

model Match {
  id         String   @id @default(uuid())

  senderId   Int
  sender     User     @relation("SenderMatches", fields: [senderId], references: [id])

  receiverId Int
  receiver   User     @relation("ReceiverMatches", fields: [receiverId], references: [id])

  skillId    Int
  skill      Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  status     MatchStatus @default(PENDENTE)
  createdAt  DateTime @default(now())
}


enum MatchStatus {
  PENDENTE
  ACEITO
  RECUSADO
}
